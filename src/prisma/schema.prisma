generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   authorId  Int
//   author    User     @relation(fields: [authorId], references: [id])
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   userId Int     @unique
//   user   User    @relation(fields: [userId], references: [id])
// }

model User {
    id             String             @id @default(cuid())
    email          String             @unique
    name           String?
    password       String
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @updatedAt
    organizations  OrganizationUser[]
    articles       Article[]
    knowledgeBases KnowledgeBase[]
}

model Organization {
    id             String             @id @default(uuid())
    name           String             @unique
    ownerId        String
    owner          User               @relation(fields: [ownerId], references: [id])
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @updatedAt
    members        OrganizationUser[]
    knowledgeBases KnowledgeBase[]
}

model OrganizationUser {
    id             String           @id @default(uuid())
    userId         String
    user           User             @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization     @relation(fields: [organizationId], references: [id])
    role           OrganizationRole
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
}

// the relation fields in the organization user model are used to create a many-to-many relationship between users and organizations

enum OrganizationRole {
    OWNER
    ADMIN
    MEMBER
    VIEWER
}

model KnowledgeBase {
    id             String       @id @default(uuid())
    title          String
    description    String?
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])
    creatorId      String
    creator        User         @relation(fields: [creatorId], references: [id])
    access         AccessLevel  @default(PRIVATE) // Public, Private, Organization
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    articles       Article[]
}

